./
./app/
./app/models/
./app/models/house.py
from app import db

class House(db.Model):
    __tablename__ = 'house'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    space_id = db.Column(db.Integer, db.ForeignKey('space.id'), nullable=False)
    file_path = db.Column(db.String(200), nullable=False)  # Path to CSV file
    simulations_count = db.Column(db.Integer, nullable=False)
    factors_count = db.Column(db.Integer, nullable=False)

    def __repr__(self):
        return f'<House {self.name}>'
./app/models/space.py
from app import db

class Space(db.Model):
    __tablename__ = 'space'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    factors = db.Column(db.JSON, nullable=False)  # List of CSV column names
    houses = db.relationship('House', backref='space', lazy=True, cascade='all, delete-orphan')

    def __repr__(self):
        return f'<Space {self.name}>'
./app/models/user.py
from werkzeug.security import generate_password_hash, check_password_hash
from app import db

class User(db.Model):
    __tablename__ = 'user'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    spaces = db.relationship('Space', backref='owner', lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.username}>'
./app/routes/
./app/routes/analysis.py

./app/routes/houses.py
from flask import Blueprint, request, jsonify
from werkzeug.utils import secure_filename
from ..models import Space, House, db
from ..utils.csv_validation import validate_csv_factors
import pandas as pd
import os

houses_bp = Blueprint('houses', __name__, url_prefix='/api/spaces/<int:space_id>/houses')

@houses_bp.route('', methods=['POST'])
def upload_house(space_id):
    space = Space.query.get_or_404(space_id)
    
    # Check CSV file
    if 'file' not in request.files:
        return jsonify({'error': 'No file uploaded'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'Empty filename'}), 400
    
    # Validate CSV structure
    try:
        df = pd.read_csv(file.stream)
        validate_csv_factors(df.columns.tolist(), space.factors)
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    
    # Save file
    filename = secure_filename(f"{space_id}_{file.filename}")
    file_path = os.path.join('instance/data', filename)
    file.stream.seek(0)
    file.save(file_path)
    
    # Create house record
    new_house = House(
        name=request.form.get('name', filename),
        space_id=space_id,
        file_path=file_path,
        simulations_count=len(df),
        factors_count=len(df.columns)
    )
    db.session.add(new_house)
    db.session.commit()
    
    return jsonify({
        'id': new_house.id,
        'name': new_house.name,
        'simulations': new_house.simulations_count
    }), 201
./app/routes/spaces.py
from flask import Blueprint, request, jsonify
from ..models import Space, House, db
from ..utils.csv_validation import validate_csv_factors
import os

spaces_bp = Blueprint('spaces', __name__, url_prefix='/api/spaces')

@spaces_bp.route('', methods=['GET'])
def get_spaces():
    # For simplicity, using mock user_id (implement auth later)
    spaces = Space.query.filter_by(user_id=1).all()
    return jsonify([{
        'id': space.id,
        'name': space.name,
        'factors': space.factors,
        'house_count': len(space.houses)
    } for space in spaces])

@spaces_bp.route('', methods=['POST'])
def create_space():
    data = request.get_json()
    if not data or 'name' not in data or 'factors' not in data:
        return jsonify({'error': 'Missing name or factors'}), 400
    
    new_space = Space(
        name=data['name'],
        user_id=1,  # Mock user ID
        factors=data['factors']
    )
    db.session.add(new_space)
    db.session.commit()
    return jsonify({'id': new_space.id, 'name': new_space.name}), 201

@spaces_bp.route('/<int:space_id>', methods=['GET'])
def get_space(space_id):
    space = Space.query.get_or_404(space_id)
    return jsonify({
        'id': space.id,
        'name': space.name,
        'factors': space.factors,
        'houses': [house.name for house in space.houses]
    })
./app/utils/
./app/utils/csv_validation.py

./instance/
./instance/data/
./output.txt
